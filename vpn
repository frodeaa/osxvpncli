#!/usr/bin/env bash

function help() {
cat <<EOF
Description:
  Connect and disconnect VPN connections from an OSX command line

Usage:
  $(basename $0) [OPTION] <vpn_name>

Options:
  connect         Establish a connection new connection
  disconnect      Disconnect an established connection
  status          Show the status of each connection
EOF
exit 1
}

function connections() {
  scutil --nc list | awk '
    BEGIN         { FS="\"" }
    /\[(PPP:L2TP)|(IPSec)\]/  { print $2 }
  ' | sort
}

function connection_status() {
  connection="$1"
  scutil --nc list | awk -v connection="${connection}" '
    $0 ~ connection {
      gsub(/[\(\)]/, "")        # delete the brackets
      print $2
    }
  '
  return $?
}

[[ -z $@ ]] && help

for arg in "$@"; do
  [[ $arg == "--help" ]] && help
done

f=$1
shift
c=$(echo $@ | sed 's#\ #\\\ #g')

case $f in
  "connect")
    if [[ -z $c ]]; then
      echo "You must provide a VPN to connect"
      exit 1
    fi
    eval "scutil --nc start $c"
    ;;
  "disconnect")
    if [[ -z $c ]]; then
      echo "You must provide a VPN to disconnect"
      exit 1
    fi
    osascript -e "tell application \"System Events\""                \
              -e "  tell current location of network preferences"    \
              -e "    set VPN to service \"$(echo $c | tr -d '\')\""                         \
              -e "    if exists VPN then disconnect VPN"             \
              -e "  end tell"                                        \
              -e "end tell"                                          >/dev/null
    ;;
  "status")
    IFS=$'\n'
    for c in $(connections); do
      tabs=$(( ( ${#c} / 8 - 2 ) * -1 + 1 ))
      echo -n ${c}
      for ((n=0;n<tabs;n++)); do echo -n -e "\t"; done
      connection_status "${c}"
    done
    ;;
esac
